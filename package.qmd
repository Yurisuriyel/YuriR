---
title: "linrbook"
author: "Linze Yu"
date: "`r Sys.Date()`"
format:
  html:
    theme: Quartz
    toc: true
    fontcolor: "#FFFFFF"
    number-sections: true
    code-overflow: wrap
    self-contained: true
    fig-cap-location: top
    title-block-style: default
    code-copy: true
    code-block-bg: "#E6EEF1"
    execute:
      fig-dpi: 200
      fig-format: png
      eval: false
      echo: true
      warning: false
      error: false
      prompt: false
      message: false
      collapse: false
      comment: ""
R.options:
 knitr.graphics.auto_pdf: true
editor_options:
  markdown:
    wrap: sentence
---
cache: true


# 安装加载的包
```{r}
devtools::install_github("leeper/rio") # 导入数据
devtools::install_github("hope-data-science/tidyfst")
install.packages("data.table") # 高性能数据处理
# data.table::update.dev.pkg() # datatable最新版
devtools::install_github("tidyverse/tidyverse") # Tidy-R(1+7)
devtools::install_github("tidymodels/tidymodels") # Tidy-R"(1+12)
devtools::install_github("DavisVaughan/furrr") # 并行purrr
devtools::install_github("kassambara/survminer", build_vignettes = FALSE) # ggplot2绘制生存曲线
devtools::install_github("therneau/survival") # 生存曲线
# devtools::install_github("zzawadz/customLayout") # 图片排版
install.packages("glmnet") # LASSO回归
devtools::install_github("jokergoo/circlize") # 弦图
devtools::install_github("jokergoo/ComplexHeatmap") # 热图*
install.packages("knitr") # 文档编辑必要/表格+渲染
devtools::install_github("ddsjoberg/gtsummary") # 基线资料表
devtools::install_github("r-lib/scales") # 缩放刻度
devtools::install_github("nucleic-acid/namedropR") # 参考文献
install.packages("Cairo") # PDF字体
devtools::install_github(repo = "amices/mice") # 多重插补法
devtools::install_github("lepennec/ggwordcloud") # 词云
install.packages("showtext") # 中文PDF
devtools::install_github("slowkow/ggrepel") # 文本防重叠
```

```{r}
devtools::install_github("aphalo/ggpmisc") # 带标模型方程,ANOVA 表,摘要表的注释图;发现和标记山峰和山谷;注释支持分组和方面
devtools::install_github("thomasp85/ggforce") # 形状曲线
install.packages("shiny") # 不用网页开发也可以写自己的网站
devtools::install_github("qinwf/jiebaR") # 中文分词
devtools::install_github("quanteda/readtext") # 读取文本pdf,docx,xml,json
devtools::install_github("ropensci/skimr") # 用最少的代码来获知数据框的方方面面
devtools::install_github("ropensci/tokenizers") # 文本切分
install.packages("hunspell") # 拼写检查
install.packages("udpipe") # 词形还原
install.packages("textreadr") # rtf,html,docx
devtools::install_github("juliasilge/tidytext") # 文本挖掘
devtools::install_github("ltorgo/DMwR2", ref = "develop") # 使用局部异常因子法(LOF法)检测异常值,LOF算法只对数值型数据有效
devtools::install_github("GuangchuangYu/rvcheck") # 更新包
devtools::install_github("HenrikBengtsson/future", ref = "develop") # 多核计算
devtools::install_github("erocoar/gghalves") # 裁剪图形
devtools::install_github("const-ae/ggsignif") # 添加P值
devtools::install_github("haozhu233/kableExtra") # knitr+
devtools::install_github("YuLab-SMU/ggbreak") # 坐标轴截断
devtools::install_github("tylermorganwall/rayrender") # 光线追踪
devtools::install_github("koalaverse/vip") # 变量重要程度
devtools::install_github("majianthu/copent") # Copula熵
devtools::install_github("dami82/easyPubMed") # PubMed
devtools::install_github("imbs-hl/ranger") # 随机森林
```

# 安装本地包
```{r}
setwd("D:/desktop")
devtools::install_local(".zip")
```

# linr加载的相关包
```{r,linr加载的相关包}
library("rio") # 导入数据
library("data.table") # 处理大数据
library("tidyfst") # dplyr类似,底层使用datatable
library("tidyverse") # tidy-R
library("knitr") # 表格+渲染
library("showtext") # 中文PDF
```

## other
```{r}
library("Cairo") # 渲染
library("furrr") # purrr
library("customLayout") # 图片排版
library("gtsummary") # 基线资料表
library("scales") # 缩放刻度
library("namedropR") # 参考文献
```

## 绘图
```{r}
library("circlize") # 圈图
library("ComplexHeatmap") # 热图*
library("ggwordcloud") # 词云
library("ggrepel") # 文本防重叠
library("survminer") # 生存曲线
library("survival") # 生存曲线
library("ggpmisc") # 拟合模型相关的注释和绘图
library("ggforce") # 形状曲线
library("gghalves") # 裁剪图形
library("ggbreak") # 坐标轴截断
library("ggsignif") # 添加P值
```

## 机器学习
```{r}
library("glmnet") # LASSO回归
library("tidymodels")
```

## 数据
```{r}
library("mice") # 多重插补
library("skimr") # 用最少的代码来获知数据框的方方面面
library("DMwR2") # 使用局部异常因子法(LOF法)检测异常值
library("future") # 多核计算
library("kableExtra") # 表格+
```

## 文本
```{r}
library("jiebaR") # 分词
library("readtext") # 读取文本pdf,docx,xml,json
library("tokenizers") # 文本切分
library("hunspell") # 拼写检查
library("udpipe") # 词形还原
library("textreadr") # rtf,html,docx
library("tidytext") #
```

```{r}
library("shiny") # 交互网页
library("rvcheck") # 更新包
```

# 内容
## 离散颜色
```{r,24cols}
cols <- c("#00997B", "#FC766A", "#696AAD", "#EBBF57", "#C34E7C", "#92B558", "#BD3645", "#34558B", "#F3E04E", "#6B5B95", "#4DB6AD", "#E34F33", "#95AAD3", "#DECEBB", "#975A58", "#5BB3B0", "#9D363F", "#6364A5", "#E2654D", "#F8CDCD", "#7FC9CB", "#D85A7B", "#98B2D1", "#B067A1")
```

```{r,24fills}
fills <- c("#00997B", "#FC766A", "#696AAD", "#EBBF57", "#C34E7C", "#92B558", "#BD3645", "#34558B", "#F3E04E", "#6B5B95", "#4DB6AD", "#E34F33", "#95AAD3", "#DECEBB", "#975A58", "#5BB3B0", "#9D363F", "#6364A5", "#E2654D", "#F8CDCD", "#7FC9CB", "#D85A7B", "#98B2D1", "#B067A1")
```

## 中心化/标准化
```{r}
cscale <- function(x) {
  x %>%
    scale(center = T, scale = F)
}
sscale <- function(x) {
  x %>%
    scale(center = F, scale = T)
}
```

## 主题
### lin_theme
```{r,lin_theme}
lin_theme <- theme(
  text = element_text(color = 1), # 全字体
  plot.title = element_text(size = 12, hjust = 0.5, angle = 0, lineheight = 1, margin = margin(0, 1, 0, 0)), # 标题
  plot.subtitle = element_text(angle = 0, lineheight = 1, margin = margin(0, 0, 2, 0)), # 副标题
  plot.caption = element_text(angle = 0, lineheight = 1, margin = margin(0, 0, 0, 0)), # 说明文字
  plot.tag = element_text(angle = 0, lineheight = 1, margin = margin(0, 0, 0, 0)), # 标签
  legend.title = element_text(margin = margin(0, 0, 0, 0)), # 图例标题
  legend.text = element_text(margin = margin(0, 0, 0, 0)), # 图例文字
  strip.text.x = element_text(hjust = 0.5, margin = margin(0, 0, 1, 0)), # 水平分面标签文本
  strip.text.y = element_text(vjust = 0.5, margin = margin(0, 0, 0, 1)), # 竖直分面标签文本
  axis.text.y = element_text(vjust = 0.5, hjust = 1, angle = 0, margin = margin(0, 2, 0, 0)), # Y轴数字标
  axis.title.y = element_text(vjust = 0.5, hjust = 0.5, angle = 90, margin = margin(0, 3, 0, 0)), # Y轴标题
  axis.text.x = element_text(vjust = 0.5, hjust = 0.5, angle = 0, margin = margin(1, 0, 0, 0)), # X轴数字标
  axis.title.x = element_text(vjust = 0.5, hjust = 0.5, angle = 0, margin = margin(2, 0, 0, 0)), # X轴标题
  panel.background = element_rect(fill = NA), # 绘图区域背景
  panel.border = element_rect(color = NA, fill = NA, size = 1), # 绘图区边框
  plot.background = element_rect(fill = NA, color = NA), # 文字区域+图像背景
  legend.background = element_rect(fill = NA, color = NA), # 图例背景
  legend.key = element_rect(fill = NA, color = NA), # 图例符号背景
  strip.background = element_rect(fill = NA), # 分面标签背景
  axis.line = element_line(color = "#96999C", size = 1, lineend = "square"), # 坐标轴
  axis.ticks.x = element_line(color = "#96999C", size = 1, lineend = "square"), # X轴刻度线
  axis.ticks.y = element_line(color = "#96999C", size = 1, lineend = "square"), # Y轴刻度线
  axis.ticks.length = unit(.15, "cm"), # 刻度线长度
  panel.grid.major.x = element_line(color = NA, size = 0.5, linetype = 3, lineend = "square"), # 主竖线"#96999C"
  panel.grid.major.y = element_line(color = NA, size = 0.5, linetype = 3, lineend = "square"), # 主横线"#96999C"
  panel.grid.minor.x = element_line(color = NA, size = 0.25, linetype = 3, lineend = "square"), # 次竖线"#96999C"
  panel.grid.minor.y = element_line(color = NA, size = 0.25, linetype = 3, lineend = "square"), # 次横线"#96999C"
  plot.margin = margin(t = 0.5, r = 0.5, b = 0.1, l = 0.5, unit = "cm"), # 图边界(距离可以为0或者为负值)
  panel.spacing.x = unit(.15, "cm"), # 竖直分面绘图区之间的间距
  panel.spacing.y = unit(.15, "cm"), # 水平分面绘图区之间的间距
  legend.margin = margin(t = 0, r = 0, b = 0, l = -9), # 图例边界, unit = "cm"
  legend.position = ("right"), # 图例位置left, right, bottom, top, c(0.9, 0.9)
  legend.key.height = unit(0.5, "cm"), # 图例符号高度
  legend.key.width = unit(0.5, "cm"), # 图例符号宽度
  legend.key.size = unit(0.5, "cm"), # 图例符号大小
  legend.title.align = (0), # 图例标题对齐方式(0为左齐, 1为右齐, 0.5居中)
  legend.text.align = (0), # 图例文字标签对齐方式(0为左齐, 1为右齐, 0.5居中)
  legend.direction = "vertical", # 图例排列方向"horizontal"(水平一行)
  legend.justification = c(1, 1), # 图例位置	center或两数字向量
  legend.box = "vertical", # 多图例的排列方式	"horizontal"
  legend.box.just = (0.5), # 多图例居中方式
  plot.caption.position = "panel",
  plot.tag.position = "topleft",
  plot.title.position = "plot",
  # aspect.ratio = 7/5,
  # legend.key = element_rect(fill = "group", color = "group"),#图例符号
)
```

## 计算
### [决策曲线](https://www.mskcc.org/departments/epidemiology-biostatistics/biostatistics/decision-curve-analysis)
#### stdca
```{r,stdca}
stdca <- function(data, outcome, ttoutcome, timepoint, predictors, xstart = 0.01, xstop = 0.99, xby = 0.01, ymin = -0.05, probability = NULL, harm = NULL, graph = TRUE, intervention = FALSE, interventionper = 100, smooth = FALSE, loess.span = 0.10, cmprsk = FALSE) {
  # LOADING REQUIRED LIBRARIES
  require(survival)
  require(stats)

  # ONLY KEEPING COMPLETE CASES
  data <- data[complete.cases(data[c(outcome, ttoutcome, predictors)]), c(outcome, ttoutcome, predictors)]

  # outcome MUST BE CODED AS 0 AND 1
  if ((length(data[!(data[outcome] == 0 | data[outcome] == 1), outcome]) > 0) & cmprsk == FALSE) {
    stop("outcome must be coded as 0 and 1")
  }

  # data MUST BE A DATA FRAME
  if (class(data) != "data.frame") {
    stop("Input data must be class data.frame")
  }

  # xstart IS BETWEEN 0 AND 1
  if (xstart < 0 | xstart > 1) {
    stop("xstart must lie between 0 and 1")
  }

  # xstop IS BETWEEN 0 AND 1
  if (xstop < 0 | xstop > 1) {
    stop("xstop must lie between 0 and 1")
  }

  # xby IS BETWEEN 0 AND 1
  if (xby <= 0 | xby >= 1) {
    stop("xby must lie between 0 and 1")
  }

  # xstart IS BEFORE xstop
  if (xstart >= xstop) {
    stop("xstop must be larger than xstart")
  }

  # STORING THE NUMBER OF PREDICTORS SPECIFIED
  pred.n <- length(predictors)

  # IF probability SPECIFIED ENSURING THAT EACH PREDICTOR IS INDICATED AS A T OR F
  if (length(probability) > 0 & pred.n != length(probability)) {
    stop("Number of probabilities specified must be the same as the number of predictors being checked.")
  }


  # IF harm SPECIFIED ENSURING THAT EACH PREDICTOR HAS A SPECIFIED HARM
  if (length(harm) > 0 & pred.n != length(harm)) {
    stop("Number of harms specified must be the same as the number of predictors being checked.")
  }

  # INITIALIZING DEFAULT VALUES FOR PROBABILITES AND HARMS IF NOT SPECIFIED
  if (length(harm) == 0) {
    harm <- rep(0, pred.n)
  }
  if (length(probability) == 0) {
    probability <- rep(TRUE, pred.n)
  }

  # THE PREDICTOR NAMES CANNOT BE EQUAL TO all OR none.
  if (length(predictors[predictors == "all" | predictors == "none"])) {
    stop("Prediction names cannot be equal to all or none.")
  }

  # CHECKING THAT EACH probability ELEMENT IS EQUAL TO T OR F,
  # AND CHECKING THAT PROBABILITIES ARE BETWEEN 0 and 1
  # IF NOT A PROB THEN CONVERTING WITH A COX REGRESSION
  for (m in 1:pred.n) {
    if (probability[m] != TRUE & probability[m] != FALSE) {
      stop("Each element of probability vector must be TRUE or FALSE")
    }
    if (probability[m] == TRUE & (max(data[predictors[m]]) > 1 | min(data[predictors[m]]) < 0)) {
      stop(paste(predictors[m], "must be between 0 and 1 OR sepcified as a non-probability in the probability option", sep = " "))
    }
    if (probability[m] == FALSE) {
      model <- NULL
      pred <- NULL
      model <- coxph(Surv(data.matrix(data[ttoutcome]), data.matrix(data[outcome])) ~ data.matrix(data[predictors[m]]))
      surv.data <- data.frame(0)
      pred <- data.frame(1 - c(summary(survfit(model, newdata = surv.data), time = timepoint)$surv))
      names(pred) <- predictors[m]
      data <- cbind(data[names(data) != predictors[m]], pred)
      print(paste(predictors[m], "converted to a probability with Cox regression. Due to linearity and proportional hazards assumption, miscalibration may occur.", sep = " "))
    }
  }

  #########  CALCULATING NET BENEFIT   #########
  N <- dim(data)[1]

  # getting the probability of the event for all subjects
  # this is used for the net benefit associated with treating all patients
  if (cmprsk == FALSE) {
    km.cuminc <- survfit(Surv(data.matrix(data[ttoutcome]), data.matrix(data[outcome])) ~ 1)
    pd <- 1 - summary(km.cuminc, times = timepoint)$surv
  } else {
    require(cmprsk)
    cr.cuminc <- cuminc(data[[ttoutcome]], data[[outcome]])
    pd <- timepoints(cr.cuminc, times = timepoint)$est[1]
  }

  # creating dataset that is one line per threshold for the treat all and treat none strategies;
  # CREATING DATAFRAME THAT IS ONE LINE PER THRESHOLD PER all AND none STRATEGY
  nb <- data.frame(seq(from = xstart, to = xstop, by = xby))
  names(nb) <- "threshold"
  interv <- nb
  error <- NULL

  nb["all"] <- pd - (1 - pd) * nb$threshold / (1 - nb$threshold)
  nb["none"] <- 0

  # CYCLING THROUGH EACH PREDICTOR AND CALCULATING NET BENEFIT
  for (m in 1:pred.n) {
    nb[predictors[m]] <- NA

    for (t in 1:length(nb$threshold)) {
      # calculating number of true and false postives;
      px <- sum(data[predictors[m]] > nb$threshold[t]) / N

      if (px == 0) {
        error <- rbind(error, paste(predictors[m], ": No observations with risk greater than ", nb$threshold[t] * 100, "%", sep = ""))
        break
      } else {
        # calculate risk using Kaplan Meier
        if (cmprsk == FALSE) {
          km.cuminc <- survfit(Surv(data.matrix(data[data[predictors[m]] > nb$threshold[t], ttoutcome]), data.matrix(data[data[predictors[m]] > nb$threshold[t], outcome])) ~ 1)
          pdgivenx <- (1 - summary(km.cuminc, times = timepoint)$surv)
          if (length(pdgivenx) == 0) {
            error <- rbind(error, paste(predictors[m], ": No observations with risk greater than ", nb$threshold[t] * 100, "% that have followup through the timepoint selected", sep = ""))
            break
          }
          # calculate risk using competing risk
        } else {
          cr.cuminc <- cuminc(data[[ttoutcome]][data[[predictors[m]]] > nb$threshold[t]], data[[outcome]][data[[predictors[m]]] > nb$threshold[t]])
          pdgivenx <- timepoints(cr.cuminc, times = timepoint)$est[1]
          if (is.na(pdgivenx)) {
            error <- rbind(error, paste(predictors[m], ": No observations with risk greater than ", nb$threshold[t] * 100, "% that have followup through the timepoint selected", sep = ""))
            break
          }
        }
        # calculating NB based on calculated risk
        nb[t, predictors[m]] <- pdgivenx * px - (1 - pdgivenx) * px * nb$threshold[t] / (1 - nb$threshold[t]) - harm[m]
      }
    }
    interv[predictors[m]] <- (nb[predictors[m]] - nb["all"]) * interventionper / (interv$threshold / (1 - interv$threshold))
  }
  if (length(error) > 0) {
    print(paste(error, ", and therefore net benefit not calculable in this range.", sep = ""))
  }

  # CYCLING THROUGH EACH PREDICTOR AND SMOOTH NET BENEFIT AND INTERVENTIONS AVOIDED
  for (m in 1:pred.n) {
    if (smooth == TRUE) {
      lws <- loess(data.matrix(nb[!is.na(nb[[predictors[m]]]), predictors[m]]) ~ data.matrix(nb[!is.na(nb[[predictors[m]]]), "threshold"]), span = loess.span)
      nb[!is.na(nb[[predictors[m]]]), paste(predictors[m], "_sm", sep = "")] <- lws$fitted

      lws <- loess(data.matrix(interv[!is.na(nb[[predictors[m]]]), predictors[m]]) ~ data.matrix(interv[!is.na(nb[[predictors[m]]]), "threshold"]), span = loess.span)
      interv[!is.na(nb[[predictors[m]]]), paste(predictors[m], "_sm", sep = "")] <- lws$fitted
    }
  }


  # PLOTTING GRAPH IF REQUESTED
  if (graph == TRUE) {
    require(graphics)

    # PLOTTING INTERVENTIONS AVOIDED IF REQUESTED
    if (intervention == TRUE) {
      # initialize the legend label, color, and width using the standard specs of the none and all lines
      legendlabel <- NULL
      legendcolor <- NULL
      legendwidth <- NULL
      legendpattern <- NULL

      # getting maximum number of avoided interventions
      ymax <- max(interv[predictors], na.rm = TRUE)

      # INITIALIZING EMPTY PLOT WITH LABELS
      plot(x = nb$threshold, y = nb$all, type = "n", xlim = c(xstart, xstop), ylim = c(ymin, ymax), xlab = "Threshold probability", ylab = paste("Net reduction in interventions per", interventionper, "patients"))

      # PLOTTING INTERVENTIONS AVOIDED FOR EACH PREDICTOR
      for (m in 1:pred.n) {
        if (smooth == TRUE) {
          lines(interv$threshold, data.matrix(interv[paste(predictors[m], "_sm", sep = "")]), col = m, lty = 2)
        } else {
          lines(interv$threshold, data.matrix(interv[predictors[m]]), col = m, lty = 2)
        }

        # adding each model to the legend
        legendlabel <- c(legendlabel, predictors[m])
        legendcolor <- c(legendcolor, m)
        legendwidth <- c(legendwidth, 1)
        legendpattern <- c(legendpattern, 2)
      }
    } else {
      # PLOTTING NET BENEFIT IF REQUESTED
      # initialize the legend label, color, and width using the standard specs of the none and all lines
      legendlabel <- c("None", "All")
      legendcolor <- c(17, 8)
      legendwidth <- c(2, 2)
      legendpattern <- c(1, 1)

      # getting maximum net benefit
      ymax <- max(nb[names(nb) != "threshold"], na.rm = TRUE)

      # inializing new benfit plot with treat all option
      plot(x = nb$threshold, y = nb$all, type = "l", col = 8, lwd = 2, xlim = c(xstart, xstop), ylim = c(ymin, ymax), xlab = "Threshold probability", ylab = "Net benefit")
      # adding treat none option
      lines(x = nb$threshold, y = nb$none, lwd = 2)
      # PLOTTING net benefit FOR EACH PREDICTOR
      for (m in 1:pred.n) {
        if (smooth == TRUE) {
          lines(nb$threshold, data.matrix(nb[paste(predictors[m], "_sm", sep = "")]), col = m, lty = 2)
        } else {
          lines(nb$threshold, data.matrix(nb[predictors[m]]), col = m, lty = 2)
        }
        # adding each model to the legend
        legendlabel <- c(legendlabel, predictors[m])
        legendcolor <- c(legendcolor, m)
        legendwidth <- c(legendwidth, 1)
        legendpattern <- c(legendpattern, 2)
      }
    }
    # then add the legend
    legend("topright", legendlabel, cex = 0.8, col = legendcolor, lwd = legendwidth, lty = legendpattern)
  }

  # RETURNING RESULTS
  results <- list()
  results$N <- N
  results$predictors <- data.frame(cbind(predictors, harm, probability))
  names(results$predictors) <- c("predictor", "harm.applied", "probability")
  results$interventions.avoided.per <- interventionper
  results$net.benefit <- nb
  results$interventions.avoided <- interv
  return(results)
}
```

#### dca
```{r,dca}
dca <- function(data, outcome, predictors, xstart = 0.01, xstop = 0.99, xby = 0.01,
                ymin = -0.05, probability = NULL, harm = NULL, graph = TRUE, intervention = FALSE,
                interventionper = 100, smooth = FALSE, loess.span = 0.10) {
  # LOADING REQUIRED LIBRARIES
  require(stats)

  # data MUST BE A DATA FRAME
  if (class(data) != "data.frame") {
    stop("Input data must be class data.frame")
  }

  # ONLY KEEPING COMPLETE CASES
  data <- data[complete.cases(data[append(outcome, predictors)]), append(outcome, predictors)]

  # outcome MUST BE CODED AS 0 AND 1
  if (max(data[[outcome]]) > 1 | min(data[[outcome]]) < 0) {
    stop("outcome cannot be less than 0 or greater than 1")
  }
  # xstart IS BETWEEN 0 AND 1
  if (xstart < 0 | xstart > 1) {
    stop("xstart must lie between 0 and 1")
  }

  # xstop IS BETWEEN 0 AND 1
  if (xstop < 0 | xstop > 1) {
    stop("xstop must lie between 0 and 1")
  }

  # xby IS BETWEEN 0 AND 1
  if (xby <= 0 | xby >= 1) {
    stop("xby must lie between 0 and 1")
  }

  # xstart IS BEFORE xstop
  if (xstart >= xstop) {
    stop("xstop must be larger than xstart")
  }

  # STORING THE NUMBER OF PREDICTORS SPECIFIED
  pred.n <- length(predictors)

  # IF probability SPECIFIED ENSURING THAT EACH PREDICTOR IS INDICATED AS A YES OR NO
  if (length(probability) > 0 & pred.n != length(probability)) {
    stop("Number of probabilities specified must be the same as the number of predictors being checked.")
  }

  # IF harm SPECIFIED ENSURING THAT EACH PREDICTOR HAS A SPECIFIED HARM
  if (length(harm) > 0 & pred.n != length(harm)) {
    stop("Number of harms specified must be the same as the number of predictors being checked.")
  }

  # INITIALIZING DEFAULT VALUES FOR PROBABILITES AND HARMS IF NOT SPECIFIED
  if (length(harm) == 0) {
    harm <- rep(0, pred.n)
  }
  if (length(probability) == 0) {
    probability <- rep(TRUE, pred.n)
  }


  # CHECKING THAT EACH probability ELEMENT IS EQUAL TO YES OR NO,
  # AND CHECKING THAT PROBABILITIES ARE BETWEEN 0 and 1
  # IF NOT A PROB THEN CONVERTING WITH A LOGISTIC REGRESSION
  for (m in 1:pred.n) {
    if (probability[m] != TRUE & probability[m] != FALSE) {
      stop("Each element of probability vector must be TRUE or FALSE")
    }
    if (probability[m] == TRUE & (max(data[predictors[m]]) > 1 | min(data[predictors[m]]) < 0)) {
      stop(paste(predictors[m], "must be between 0 and 1 OR sepcified as a non-probability in the probability option", sep = " "))
    }
    if (probability[m] == FALSE) {
      model <- NULL
      pred <- NULL
      model <- glm(data.matrix(data[outcome]) ~ data.matrix(data[predictors[m]]), family = binomial("logit"))
      pred <- data.frame(model$fitted.values)
      pred <- data.frame(pred)
      names(pred) <- predictors[m]
      data <- cbind(data[names(data) != predictors[m]], pred)
      print(paste(predictors[m], "converted to a probability with logistic regression. Due to linearity assumption, miscalibration may occur.", sep = " "))
    }
  }

  # THE PREDICTOR NAMES CANNOT BE EQUAL TO all OR none.
  if (length(predictors[predictors == "all" | predictors == "none"])) {
    stop("Prediction names cannot be equal to all or none.")
  }

  #########  CALCULATING NET BENEFIT   #########
  N <- dim(data)[1]
  event.rate <- colMeans(data[outcome])

  # CREATING DATAFRAME THAT IS ONE LINE PER THRESHOLD PER all AND none STRATEGY
  nb <- data.frame(seq(from = xstart, to = xstop, by = xby))
  names(nb) <- "threshold"
  interv <- nb

  nb["all"] <- event.rate - (1 - event.rate) * nb$threshold / (1 - nb$threshold)
  nb["none"] <- 0

  # CYCLING THROUGH EACH PREDICTOR AND CALCULATING NET BENEFIT
  for (m in 1:pred.n) {
    for (t in 1:length(nb$threshold)) {
      # COUNTING TRUE POSITIVES AT EACH THRESHOLD
      tp <- mean(data[data[[predictors[m]]] >= nb$threshold[t], outcome]) * sum(data[[predictors[m]]] >= nb$threshold[t])
      # COUNTING FALSE POSITIVES AT EACH THRESHOLD
      fp <- (1 - mean(data[data[[predictors[m]]] >= nb$threshold[t], outcome])) * sum(data[[predictors[m]]] >= nb$threshold[t])
      # setting TP and FP to 0 if no observations meet threshold prob.
      if (sum(data[[predictors[m]]] >= nb$threshold[t]) == 0) {
        tp <- 0
        fp <- 0
      }

      # CALCULATING NET BENEFIT
      nb[t, predictors[m]] <- tp / N - fp / N * (nb$threshold[t] / (1 - nb$threshold[t])) - harm[m]
    }
    interv[predictors[m]] <- (nb[predictors[m]] - nb["all"]) * interventionper / (interv$threshold / (1 - interv$threshold))
  }

  # CYCLING THROUGH EACH PREDICTOR AND SMOOTH NET BENEFIT AND INTERVENTIONS AVOIDED
  for (m in 1:pred.n) {
    if (smooth == TRUE) {
      lws <- loess(data.matrix(nb[!is.na(nb[[predictors[m]]]), predictors[m]]) ~ data.matrix(nb[!is.na(nb[[predictors[m]]]), "threshold"]), span = loess.span)
      nb[!is.na(nb[[predictors[m]]]), paste(predictors[m], "_sm", sep = "")] <- lws$fitted

      lws <- loess(data.matrix(interv[!is.na(nb[[predictors[m]]]), predictors[m]]) ~ data.matrix(interv[!is.na(nb[[predictors[m]]]), "threshold"]), span = loess.span)
      interv[!is.na(nb[[predictors[m]]]), paste(predictors[m], "_sm", sep = "")] <- lws$fitted
    }
  }

  # PLOTTING GRAPH IF REQUESTED
  if (graph == TRUE) {
    require(graphics)

    # PLOTTING INTERVENTIONS AVOIDED IF REQUESTED
    if (intervention == TRUE) {
      # initialize the legend label, color, and width using the standard specs of the none and all lines
      legendlabel <- NULL
      legendcolor <- NULL
      legendwidth <- NULL
      legendpattern <- NULL

      # getting maximum number of avoided interventions
      ymax <- max(interv[predictors], na.rm = TRUE)

      # INITIALIZING EMPTY PLOT WITH LABELS
      plot(x = nb$threshold, y = nb$all, type = "n", xlim = c(xstart, xstop), ylim = c(ymin, ymax), xlab = "Threshold probability", ylab = paste("Net reduction in interventions per", interventionper, "patients"))

      # PLOTTING INTERVENTIONS AVOIDED FOR EACH PREDICTOR
      for (m in 1:pred.n) {
        if (smooth == TRUE) {
          lines(interv$threshold, data.matrix(interv[paste(predictors[m], "_sm", sep = "")]), col = m, lty = 2)
        } else {
          lines(interv$threshold, data.matrix(interv[predictors[m]]), col = m, lty = 2)
        }

        # adding each model to the legend
        legendlabel <- c(legendlabel, predictors[m])
        legendcolor <- c(legendcolor, m)
        legendwidth <- c(legendwidth, 1)
        legendpattern <- c(legendpattern, 2)
      }
    } else {
      # PLOTTING NET BENEFIT IF REQUESTED

      # initialize the legend label, color, and width using the standard specs of the none and all lines
      legendlabel <- c("None", "All")
      legendcolor <- c(17, 8)
      legendwidth <- c(2, 2)
      legendpattern <- c(1, 1)

      # getting maximum net benefit
      ymax <- max(nb[names(nb) != "threshold"], na.rm = TRUE)

      # inializing new benfit plot with treat all option
      plot(x = nb$threshold, y = nb$all, type = "l", col = 8, lwd = 2, xlim = c(xstart, xstop), ylim = c(ymin, ymax), xlab = "Threshold probability", ylab = "Net benefit")
      # adding treat none option
      lines(x = nb$threshold, y = nb$none, lwd = 2)
      # PLOTTING net benefit FOR EACH PREDICTOR
      for (m in 1:pred.n) {
        if (smooth == TRUE) {
          lines(nb$threshold, data.matrix(nb[paste(predictors[m], "_sm", sep = "")]), col = m, lty = 2)
        } else {
          lines(nb$threshold, data.matrix(nb[predictors[m]]), col = m, lty = 2)
        }
        # adding each model to the legend
        legendlabel <- c(legendlabel, predictors[m])
        legendcolor <- c(legendcolor, m)
        legendwidth <- c(legendwidth, 1)
        legendpattern <- c(legendpattern, 2)
      }
    }
    # then add the legend
    legend("topright", legendlabel, cex = 0.8, col = legendcolor, lwd = legendwidth, lty = legendpattern)
  }

  # RETURNING RESULTS
  results <- list()
  results$N <- N
  results$predictors <- data.frame(cbind(predictors, harm, probability))
  names(results$predictors) <- c("predictor", "harm.applied", "probability")
  results$interventions.avoided.per <- interventionper
  results$net.benefit <- nb
  results$interventions.avoided <- interv

  return(results)
}
```

## 其他
### github API
- [github](https://github.com/)
- 注册
- 右上角设置
- 开发者设置(Developer settings)
- 个人访问令牌(Personal access tokens)
- 生成新令牌(Generate new token)
- Note+Expiration+Select scopes+(Generate token)
- 复制令牌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
- `usethis::edit_r_environ()`
- `GITHUB_TOKEN="令牌"`
- save
- 重启

### 升级R包
```{r,升级R包}
Up <- print("rvcheck::update_all()")
```

### [ChatGPT](https://github.com/jcrodriguez1989/chatgpt)
```{r}
devtools::install_github("jcrodriguez1989/chatgpt")
```

# 可选安装的包
```{r}
devtools::install_github("linze-yu/linr") #
```

## 基础包
```{r}
install.packages("devtools") # 从GitHub上下载R包
devtools::install_github("r-lib/devtools")
install.packages("remotes") # 从GitHub上下载R包
devtools::install_github("rstudio/rmarkdown") # 写书
devtools::install_github("juba/rmdformats") # Rmarkdown主题
devtools::install_github("rstudio/bookdown") # 写书
devtools::install_github("pzhaonet/bookdownplus") # 写书+
devtools::install_github("rstudio/blogdown") # 写网站
devtools::install_github("yihui/xaringan") # 幻灯片
devtools::install_github("gadenbuie/xaringanthemer") # 幻灯片主题
devtools::install_github("brentthorne/posterdown") # 海报
install.packages("tinytex") # PDF输出
tinytex::tlmgr_repo("http://mirrors.tuna.tsinghua.edu.cn/CTAN/") # PDF输出
tinytex::install_tinytex() # PDF输出
devtools::install_github("plotly/plotly") # 交互网页
devtools::install_github("r-lib/roxygen2") # R包
devtools::install_github("joshuaulrich/quantmod") # 定量金融建模和交易框架
devtools::install_github("joshuaulrich/xts")
devtools::install_github("trinker/pacman") # 参考文献
devtools::install_github("r-lib/styler") # 整理代码
devtools::install_github("gadenbuie/rsthemes") # Rstudio主题
devtools::install_github("igraph/rigraph@master")
install.packages("juicr") # 提取图片数据
```

## tidyverse
```{r}
devtools::install_github("tidyverse/tidyverse")
devtools::install_github("tidyverse/ggplot2") # 1
devtools::install_github("tidyverse/dplyr") # 2
devtools::install_github("tidyverse/tidyr") # 3
devtools::install_github("tidyverse/readr") # 4
devtools::install_github("tidyverse/purrr") # 5
devtools::install_github("tidyverse/tibble") # 6
devtools::install_github("tidyverse/stringr") # 7
devtools::install_github("tidyverse/forcats") # 8
devtools::install_github("tidyverse/lubridate") # 9
```

### tidymodels
```{r}
devtools::install_github("tidymodels/tidymodels")
devtools::install_github("tidymodels/broom") # 1
devtools::install_github("tidymodels/dials") # 2
devtools::install_github("tidymodels/infer") # 5
devtools::install_github("tidymodels/parsnip") # 6
devtools::install_github("tidymodels/recipes") # 8
devtools::install_dev("rsample") # 9
devtools::install_github("tidymodels/tune") # 11
devtools::install_github("tidymodels/workflows") # 12
devtools::install_github("tidymodels/yardstick") # 13
devtools::install_github("tidymodels/discrim") # 各种判别分析模型,朴素贝叶斯
devtools::install_github("tidymodels/baguette") #
devtools::install_github("tidymodels/censored") # 生存数据
devtools::install_github("tidymodels/plsmod") #
devtools::install_github("tidymodels/rules") #
devtools::install_github("tidymodels/agua") #
devtools::install_github("tidymodels/probably") # 校准曲线
devtools::install_github("tidymodels/shinymodels") # shiny
devtools::install_github("tidymodels/tidyclust")
```

## 机器学习
```{r}
devtools::install_github("KlausVigo/kknn")
devtools::install_dev("xrf")
BiocManager::install("mixOmicsTeam/mixOmics")
devtools::install_github("topepo/Cubist") #
install.packages("nnet") # 神经网络算法
install.packages("h2o") #
install.packages("randomForest") # 最忠实于原文献的随机森林算法包
install.packages("xgboost") # 大名鼎鼎的xgboost,kaggle高位利器
install.packages("arules") # 关联算法
install.packages("C50") # C50决策树算法包
install.packages("rpart") # CART决策树算法
install.packages("e1071") # SVM和Naive Bayes
install.packages("neuralnet") # 神经网络算法
install.packages("lubridate") # 时间处理最好的包,没有之一
install.packages("zoo") # 时间序列
devtools::install_github("xrobin/pROC") # 绘制ROC曲线
install.packages("igraph") # 网络图以及pagerank算法
install.packages("network3D") # 结合D3.js
install.packages("DBI") # 和SQL的交互
install.packages("randomForestSRC") # 随机生存森林30000+C
```

## Torch
```{r}
devtools::install_github("mlverse/torch")
devtools::install_github("mlverse/luz")
devtools::install_github("mlverse/torchvision@main")
devtools::install_github("curso-r/torchaudio")
devtools::install_github("bips-hb/innsight")
devtools::install_github("mlverse/tabnet")
```

## 数据部分
```{r}
install.packages("haven")
devtools::install_github("ycphs/openxlsx")
install.packages("feather") # R&Python高效数据
devtools::install_github("fstpackage/fst", ref = "develop")
devtools::install_github("r-lib/xml2")
devtools::install_github("Yue-Jiang/pzfx")
install.packages("fBasics") # 正态性检验1
install.packages("timeDate") # 正态性检验2
install.packages("timeSeries") # 正态性检验3
install.packages("car") # 方差齐性检验
install.packages("psych") # 相关性检验
install.packages("jmv") # jamovi
install.packages("PMCMRplus") # 非参数检验的全能R包
install.packages("lavaan") # 结构方程模型分析频率学派
install.packages("piecewiseSEM") # 结构方程模型分析
install.packages("brms") # 结构方程模型分析贝叶斯学派
install.packages("copent") # Copula熵/传递熵比pearson高级
```

## 主要绘图包
```{r}
install.packages("MASS") # 曲线拟合
install.packages("mgcv") # 曲线拟合
install.packages("hexbin") # 六边形封箱热图
devtools::install_github("ChrisLou-bioinfo/gg.gap") # 截断坐标轴
devtools::install_github("kassambara/rstatix") # 计算+统计
devtools::install_github("raivokolde/pheatmap") # 热图
install.packages("magick") # 热图栅格化
devtools::install_github("csdaw/ggprism") # 用ggplot2输出GraphPad prism的图
devtools::install_github("cardiomoon/webr") # 饼图+甜甜圈图+旭日图
devtools::install_github("r-tmap/tmaptools") # 专题地图
devtools::install_github("r-tmap/tmap") # 专题地图
devtools::install_github("badbye/baidumap") # 百度地图
Sys.setenv("R_REMOTES_NO_ERRORS_FROM_WARNINGS" = "true")
devtools::install_github("rspatial/terra")
devtools::install_github("EmilHvitfeldt/paletteer") # 配色
devtools::install_github("calligross/ggthemeassist") # 主题调整
devtools::install_github("JohnCoene/echarts4r") # 绘图系统
devtools::install_github("gforge/forestplot") # 森林图
devtools::install_github("adayim/forestploter") # 森林图
devtools::install_github("svalvaro/drawCell") # 细胞图
```

## 文本挖掘
```{r}
install.packages("tonkenizers")
install.packages("magick") # 高级图像处理
install.packages("imager") # 基于CImg的R图像处理库,可以快速处理多达4个维度的图像信息(两个空间维度,一个时间或深度维度,一个颜色维度)
install.packages("av") # 对音频和视频进行分析的工具
install.packages("seewave") # 分析,操作,显示,编辑和合成时间波的功能(特别是音频文件)
devtools::install_github("HenrikBengtsson/future.apply", ref = "develop") # 多个文件的并行读取
devtools::install_github("quanteda/quanteda")
devtools::install_github("mkearney/textfeatures")
install.packages("text2vec")
install.packages("stringdist") # 距离计算
install.packages("RSentiment")
install.packages("sentimentr")
install.packages("SentimentAnalysis")
devtools::install_github("wrathematics/meanr")
devtools::install_github("SentometricsResearch/sentometrics")
```

## 其他
```{r}
devtools::install_github("xoopR/param6") # 快速轻便的 R6 参数接口
devtools::install_github("hadley/strict") # 严格代码
devtools::install_github("hadley/emo") # 添加表情
devtools::install_github("s-u/PKI") # needed for bug fixes not currently on CRAN
devtools::install_github("hadley/secure") # 保护公共包中的私有 R 数据
devtools::install_github("tidyverse/glue")
devtools::install_github("asteves/tayloRswift") # 泰勒专辑配色
devtools::install_github("sjmgarnier/viridis") # 配色
install.packages("patternplot") # 黑白填充
install.packages("sudoku") # 可以设计数独,解数独
install.packages("tm") # 文本挖掘包
devtools::install_github("mjockers/syuzhet") # 文本中提取情绪和基于情绪的情节弧线
devtools::install_github("igraph/rigraph@master") # igraph 网络分析库
devtools::install_github("thomasp85/ggraph") # 网络,图形和树
devtools::install_github("mjockers/syuzhet") # 文本挖掘
devtools::install_github("EmilHvitfeldt/textdata") # 文本挖掘
install.packages("reshape2") # 文本挖掘
# 6800个带标签的单词,经过严格审查的学术研究
devtools::install_github("trinker/qdapDictionaries")
devtools::install_github("trinker/qdapRegex")
devtools::install_github("trinker/qdapTools")
devtools::install_github("trinker/qdap")
install.packages("glmnet") # LASSO回归
install.packages("renv") # R项目创建可重现环境
devtools::install_github("wviechtb/metafor") # Meta分析
```

## 数据
```{r}
install.packages("OCNet") # 自然河网
install.packages("salem") # 女巫
install.packages("archeofrag") # 考古学
devtools::install_github("david6marsh/himach") # 超音速飞机最佳航线
install.packages("DIGSS") # 考古学
install.packages("crimedata") # 犯罪数据
install.packages("nasapower") # 能源预测,全球气象
install.packages("wikisourcer") # 公共领域作品
devtools::install_github("hadley/babynames") # 包含美国社会保障管理局提供的三个数据集
install.packages("neiss") # 2009-2014年期间提供给美国急诊室的所有事故报告样本数据
devtools::install_github("hadley/yrbss") # 美国疾病控制中心2009-2013年期间青年危险行为监测系统数据
devtools::install_github("hadley/hflights") # 2011年从休斯敦出发的航班
devtools::install_github("AndySouth/rworldmap", build_vignettes = TRUE) # 国家边界数据
install.packages("usdanutrients") # 美国农业部营养数据库
devtools::install_github("hadley/fueleconomy") # 美国环保署1984-2015年期间的燃油经济数据
install.packages("nasaweather") # 包含了一个覆盖中美洲的非常粗糙的24*24格地理位置和大气测量数据
install.packages("mexico-mortality") # 墨西哥死亡人数数据
install.packages("data-movies") # 互联网电影数据库http://imdb.com的数据
install.packages("pop-flows") # 2008年全美人口流动数据
install.packages("data-housing-crisis") # 经过清洗后的2008美国房地产危机数据
install.packages("gun-sales") # 纽约时报提供的有关枪支购买的每月背景调查统计分析数据
devtools::install_github("rich-iannone/stationaRy") # 从成千上万个全球站点收集到的每小时气象数据
devtools::install_github("jennybc/gapminder") # 摘自Gapminder的数据
devtools::install_github("juliasilge/janeaustenr") # 简·奥斯丁小说全集数据
devtools::install_github("wjakethompson/taylor") # Taylor Swift 歌曲的精选数据集的轻松访问，包括歌词和音频特征
```

## mlr3

|Name|Title||
|-|-|-|
|[mlr3verse](https://github.com/mlr-org/mlr3verse)|
|[mlr3](https://mlr3.mlr-org.com)|
|[mlr3cluster](https://mlr3cluster.mlr-org.com)|无监督群集|
|[mlr3data](https://mlr3data.mlr-org.com)|其他数据集和任务|
|[mlr3filters](https://mlr3filters.mlr-org.com)|基于过滤器的特征选择|
|[mlr3fselect](https://mlr3fselect.mlr-org.com)|基于包装器的特征选择|
|[mlr3learners](https://mlr3learners.mlr-org.com)|推荐学习者|
|[mlr3pipelines](https://mlr3pipelines.mlr-org.com)|预处理运算符和管道|
|[mlr3proba](https://mlr3proba.mlr-org.com)|概率回归与生存分析|
|[mlr3tuning](https://mlr3tuning.mlr-org.com)|超参数优化|
|[mlr3viz](https://mlr3viz.mlr-org.com)|可视化|
|[paradox](https://paradox.mlr-org.com)|参数空间|
|Tuning|
|[mlr3hyperband](https://github.com/mlr-org/mlr3hyperband)|mlr3的超频调谐|
|[mlr3mbo](https://github.com/mlr-org/mlr3mbo)|R中的灵活贝叶斯优化|
|[miesmuschel](https://github.com/mlr-org/miesmuschel)|灵活的混合整数进化策略|
|Data|
|[mlr3db](https://github.com/mlr-org/mlr3db)|让mlr3透明地与(远程)数据库一起工作的数据后端|
|[mlr3oml](https://github.com/mlr-org/mlr3oml)|用OpenML连接mlr3|
|Learners|
|[mlr3torch](https://github.com/mlr-org/mlr3torch)|将torch连接到mlr3|
|[mlr3keras](https://github.com/mlr-org/mlr3keras)|mlr3的深度学习|
|[mlr3extralearners](https://github.com/mlr-org/mlr3extralearners)|mlr3中使用的额外learner|
|Utilities|
|[mlr3misc](https://github.com/mlr-org/mlr3misc)|mlr3的其他辅助函数|
|[mlr3measures](https://github.com/mlr-org/mlr3measures)|mlr3中使用的绩效指标|
|[mlr3batchmark](https://github.com/mlr-org/mlr3batchmark)|mlr3和批处理工具之间的连接器|
|[bbotk](https://github.com/mlr-org/bbotk)|mlr3的黑盒优化工具包|
|[mlr3benchmark](https://github.com/mlr-org/mlr3benchmark)|mlr3及以后的基准分析和工具|
|[mlr3fairness](https://github.com/mlr-org/mlr3fairness)|机器学习中用于公平性的mlr3扩展|
|[mlr3tuningspaces](https://github.com/mlr-org/mlr3tuningspaces)|为mlr3学习者调整空间|
|Special Tasks & Targets|
|[mlr3spatiotempcv](https://github.com/mlr-org/mlr3spatiotempcv)|mlr3的时空重采样方法|
|[mlr3multioutput](https://github.com/mlr-org/mlr3multioutput)|mlr3的多个目标|
|[mlr3temporal](https://github.com/mlr-org/mlr3temporal)|mlr3的预测|
|[mlr3spatial](https://github.com/mlr-org/mlr3spatial)||
|[mlr3ordinal](https://github.com/mlr-org/mlr3ordinal)|mlr3的有序回归|
|[mlr3fda](https://github.com/mlr-org/mlr3fda)|mlr3的功能数据分析|

```{r}
devtools::install_github("mlr-org/mlr3verse") #
devtools::install_github("mlr-org/mlr3cluster") # mlr3的聚类分析
devtools::install_github("mlr-org/mlr3filters") # mlr3的变量选择过滤器
devtools::install_github("mlr-org/mlr3fselect") # mlr3的包装器功能选择
devtools::install_github("mlr-org/mlr3learners", dependencies = TRUE) # 推荐的学习器mlr3
devtools::install_github("mlr-org/mlr3proba") # 监督概率学习的扩展(包括生存分析)
devtools::install_github("mlr-org/mlr3tuning") # 通过随机搜索,网格搜索等进行超参数调优
devtools::install_github("mlr-org/mlr3viz") # mlr3的可视化效果
devtools::install_github("mlr-org/paradox") #
devtools::install_github("mlr-org/mlr3extralearners") # 更多学习器
devtools::install_github("mlr-org/bbotk") # 黑盒优化工具包
devtools::install_github("mlr-org/mlr3benchmark") # mlr3中用于基准测试的分析和工具
devtools::install_github("mlr-org/mlr3db") # 使用数据后端扩展mlr3包
devtools::install_github("mlr-org/mlr3hyperband") # mlr3的超频调谐
# mlr3measures#连接器到OpenML
# mlr3oml#用于预处理和构建复杂工作流的管道和DAG
devtools::install_github("mlr-org/mlr3spatiotempcv") # 用于对时空任务进行重新采样的扩展
devtools::install_github("mlr-org/mlr3keras")
devtools::install_github("mlr-org/mlr3proba")
devtools::install_github("r-lib/R6", build_vignettes = FALSE) # R6
devtools::install_github("evalclass/precrec")
```

## [Tensorflow](https://tensorflow.google.cn/)
### [下载Anaconda安装](https://www.anaconda.com/)
### 运行CMD.exe Prompt
### `conda --version` 查看conda
### 连接清华镜像
- `conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/`
- `conda config --set show_channel_urls yes`

### 更新pip
- `pip install --upgrade pip`

### 设置tensorflow虚拟
- `conda create -n tensorflow python=3.9`
- `y`

### Rstudio选择Tensorflow的python
### R安装Tensorflow
- `install.packages("tensorflow")`
- `library("tensorflow")`
- `install_tensorflow()`

### END

### 删除库
- `pip uninstall TensorFlow`

## 深度学习
```{r}
devtools::install_github("mlr-org/mlr3keras") #
devtools::install_github("mlverse/torch") #
devtools::install_github("rstudio/keras") #
install.packages("mxnet") # 深度学习框架
install.packages("tensorflow") # 深度学习框架
```

## Python
```{r}
install.packages("reticulate")
```

## ggplot2包扩展
```{r}
devtools::install_github("IndrajeetPatil/ggstatsplot") # GitHub
devtools::install_github("terrytangyuan/autoplotly") # 为热门统计结果自动生成交互式可视化CRAN
devtools::install_github("R-CoderDotCom/calendR") # 准备打印月度和年历CRAN
devtools::install_github("krassowski/complex-upset") # 可视化设置的交叉点并添加注释ggplot2CRAN
devtools::install_github("wilkelab/cowplot") # "ggplot2" 的流线型绘图主题和情节注释CRAN
devtools::install_github("tdhock/directlabels") # 在格子或 ggplot2 绘图中添加直接标签的框架,CRAN
devtools::install_github("R-CoderDotCom/econocharts") # 微观经济学与宏观经济学图表GitHub
devtools::install_github("dreamRs/esquisse") # 与您的数据互动探索和可视化ggplot2CRAN
devtools::install_github("sctyner/geomnet") # 地理网通过geom_net在 ggplot2 中实现网络可视化,CRAN
devtools::install_github("AckerDWM/gg3D") # ggplot2 的 3D 透视图图GitHub
devtools::install_github("corybrunson/ggalluvial@main", build_vignettes = TRUE)
devtools::install_github("corybrunson/ggalluvial", ref = "optimization") # 冲积图的"ggplot2"扩展CRAN
devtools::install_github("ggobi/ggally") # 通过添加多个功能来扩展"ggplot2",以降低将几何对象与转换数据相结合的复杂性,CRAN
devtools::install_github("hrbrmstr/ggalt") # "ggplot2" 的 "地理" , "coords" 和 "统计数据" 的简编,CRAN
devtools::install_github("jespermaag/gganatogram") # gganatogram 使不同生物体或细胞室的组织可视化成为可能,GitHub
devtools::install_github("thomasp85/gganimate") # 动画图形的语法,CRAN
devtools::install_github("jhrcook/ggasym") # 具有多个刻度图的不对称矩阵绘图,CRAN
devtools::install_github("eclarke/ggbeeswarm") # 创建蜜蜂温暖图,从而避免数据点重叠,CRAN
devtools::install_github("davidsjoberg/ggbump") # 凹凸图和西格诺曲线,CRAN
devtools::install_github("thomas-neitmann/ggcharts") # 缩短从数据可视化构想到实际绘图的距离CRAN
devtools::install_github("Selbosh/ggChernoff") # 使用人脸可视化多变种数据GitHub
devtools::install_github("teunbrand/ggchromatic") # "ggplot2"的色空间刻度GitHub
devtools::install_github("kassambara/ggcorrplot") # 使用"ggplot2"可视化相关矩阵CRAN
devtools::install_github("malcolmbarrett/ggdag") # 因果指示环形图(DAG)在ggplot2CRAN
devtools::install_github("nsgrantham/ggdark") # 主题的黑暗模式ggplot2CRAN
devtools::install_github("mjskay/ggdist") # "ggdist" 提供统计数据和地理位置,用于可视化分布和不确定性,CRAN
devtools::install_github("jonocarroll/ggeasy") # 轻松访问"ggplot2"命令CRAN
devtools::install_github("yonicd/ggedit") # ggedit 旨在以交互方式编辑 ggplot 层,刻度和主题美学CRAN
devtools::install_github("daattali/ggExtra") # ggExtra 允许您将边际密度图或直方图添加到 ggplot2 散射图中,CRAN
devtools::install_github("wilkox/ggfittext") # ggplot2地理位置, 以适应文本在一个盒子里CRAN
devtools::install_github("ProjectMOSAIC/ggformulaExtra") # ggplot2通过配方和管道CRAN
devtools::install_github("sinhrks/ggfortify") # 统一界面到 ggplot2 许多流行的统计帕克奇结果,CRAN
devtools::install_github("thomasp85/ggfx") # 用于"ggplot2"和"网格"的像素过滤器CRAN
devtools::install_github("wilkox/gggenes") # ggplot2绘制基因箭头图的地理图CRAN
if (!requireNamespace("BiocManager", quietly = TRUE)) {
  install.packages("BiocManager")
}
BiocManager::install("ggtree")
devtools::install_github("thackl/thacklr")
devtools::install_github("thackl/gggenomes") # 比较基因组学图形语法GitHub
devtools::install_github("teunbrand/ggh4x") # 定制面,多个色度和杂项选项CRAN
devtools::install_github("XiaoLuo-boy/ggheatmap") # ggplot2 版本的热图CRAN
devtools::install_github("rivasiker/ggHoriPlot") # 地平线图ggplot2CRAN
devtools::install_github("statsmaths/ggimg") # 图形层,用于绘制带有 ggplot2 的图像数据,CRAN
devtools::install_github("aphalo/gginnards") # 查找,删除,插入和移动绘图层,从存储在 ggplot 对象中的数据对象中删除未使用的数据,将数据转储到 R 控制台,GitHub
devtools::install_github("davidchall/ggip") # IP 地址和网络的数据可视化CRAN
devtools::install_github("davidgohel/ggiraph") # htmlwidget 使 "ggplot" 图形交互,CRAN
devtools::install_github("graysonwhite/gglm") # 线性模型诊断图的图形语法,CRAN
devtools::install_github("jjchern/gglorenz") # 在 ggplot2 的祝福下绘制洛伦茨曲线,CRAN
devtools::install_github("haleyjeppson/ggmosaic") # 格格马赛克通过geom_mosaic在 "ggplot2" 中实现马赛克地块,CRAN
devtools::install_github("robjohnnoble/ggmuller") # 创建穆勒绘图,用于可视化进化动态,CRAN
devtools::install_github("briatte/ggnetwork") # gnetwork 包提供了一种用 ggplot2 构建网络绘图的方法,CRAN
install.packages("ggnewsccale") # 在"ggplot2"中使用多个填充和色度,CRAN
devtools::install_github("EmilHvitfeldt/ggpage") # 创建页面布局可视化,CRAN
devtools::install_github("martin-borkovec/ggparty", dependencies = TRUE) # ggplot2包的可视化partykitGitHub
devtools::install_github("coolbutuseless/ggpattern") # ggplot2 地理位置的模式填充,GitHub
devtools::install_github("eliocamp/ggperiodic") # 自动增强周期性数据ggplot2 GitHub
devtools::install_github("mikabr/ggpirate") # 海盗阴谋ggplot2GitHub
devtools::install_github("LKremer/ggpointdensity") # 介绍 : 散射图和二元密度图之间的交叉,geom_pointdensity()CRAN
devtools::install_github("erocoar/ggpol") # ggpol 将议会图表和其他几个地理图添加到 ggplot2 中,CRAN
devtools::install_github("aphalo/ggpp") # 将绘图,表格和凹槽添加为绘图插图集;将标签从焦点或线路上移开;按局部密度过滤观测结果,CRAN
devtools::install_github("kassambara/ggpubr") # 基于"ggplot2"的出版物准备绘图CRAN
devtools::install_github("kenithgrey/ggQC") # 使用 ggQC 绘制单层,分面和多层质量控制图表,CRAN
# install.packages("ggQQunif")#制作大数据的QQ图,期望统一分布,例如p值
devtools::install_github("mitchelloharawild/ggquiver") # "ggplot2"的奎弗/速度图,CRAN
devtools::install_github("ricardo-bion/ggradar", dependencies = TRUE) # ggplot2构建雷达图表,CRAN
devtools::install_github("thomasp85/ggraph") # ggraph 是针对绘图般的数据结构(图形,网络,树木,层次结构...)量身定做的,CRAN
devtools::install_github("VPetukhov/ggrastr", build_vignettes = TRUE) # 只对情节的特定层进行光击CRAN
devtools::install_github("wilkelab/ggridges") # 里奇林情节地理为 "ggplot2"CRAN
devtools::install_github("nanxstats/ggsci") # 受科学期刊和科幻电视节目启发的"ggplot2"调色板系列,CRAN
devtools::install_github("ellisp/ggseas/pkg") # ggplot2 的飞行扩展的季节性调整,CRAN
devtools::install_github("ggseg/ggseg") # 绘制大脑地图集分割的多边形GitHub
devtools::install_github("omarwagih/ggseqlogo") # 使用 ggplot2 的出版物就绪序列徽标,GitHub
devtools::install_github("marcmenem/ggshadow") # 在线条下画一个阴影,使繁忙的情节更美观GitHub
devtools::install_github("jtlandis/ggside") # 侧语法图形CRAN
devtools::install_github("oldlipe/ggsom") # 此包的目的是提供基于自组织地图的图形的更多变异性,CRAN
install.packages("ggspectra") # "ggspectra"扩展了"ggplot2",并带有用于绘制光谱的统计数据,地理位置和注释,CRAN
devtools::install_github("lionel-/ggstance") # ggstance 实现普通 ggplot2 地理群系的水平版本,CRAN
devtools::install_github("IndrajeetPatil/ggstatsplot") # "ggstatslot"提供了一系列功能,以增强"ggplot2"图,并提供统计测试的结果,CRAN
devtools::install_github("ricardo-bion/ggtech", dependencies = TRUE) # ggplot2 技术主题,比例和地理位置,CRAN
devtools::install_github("wilkelab/ggtext") # 改进的文本渲染支持ggplot2CRAN
devtools::install_github(c("hadley/ggplot2", "jrnold/ggthemes")) # 一些额外的地理,尺度和主题为 ggplot,CRAN
devtools::install_github("Mikata-Project/ggthemr") # 格格洛特的主题GitHub
devtools::install_github("Ather-Energy/ggTimeSeries") # 此 R 包提供新颖的时间系列可视化,CRAN
devtools::install_github("rnabioco/ggtrace") # Outline groups of data points using ggplot2
install.packages("ggtree") # gtree 专为可视化噬菌体树和不同类型的相关注释数据而设计,GitHub
devtools::install_github("const-ae/ggupset") # 组合矩阵轴,用于"ggplot2"创建"上置"图CRAN
devtools::install_github("brandmaier/ggx") # "ggplot2"的自然语言界面,CRAN
devtools::install_github("hrbrmstr/hrbrthemes") # 额外的 [ggplot2] 主题,刻度和实用程序的汇编,包括绘图标签字段的拼写检查功能和对排版的整体强调,CRAN
devtools::install_github("benskov/humapr") # 可视化地形人类数据GitHub
devtools::install_github("stefanedwards/lemon") # 重新定位图例并将括号添加到轴中以"ggplot2",CRAN
devtools::install_github("yeukyul/lindia") # 创建线性回归的诊断图CRAN
devtools::install_github("thomas-neitmann/mdthemes", upgrade = "never") # 将文本渲染为标记/HTML 的"ggplot2"主题GitHub
devtools::install_github("sachsmc/plotROC") # plotROC 提供用于 Web 使用的交互式 ROC 曲线图和打印版本的功能,CRAN
devtools::install_github("aloy/qqplotr") # "ggplot2" 的量子量和概率图扩展CRAN
install.packages("see") # 可视化工具箱,用于"易数据"和"ggplot2"的额外地理,主题和调色板CRAN
devtools::install_github("statisticsNZ/simplevis") # 简单的"ggplot2"可视化,脑力和打字更少CRAN
devtools::install_github("earowang/sugrrants") # 支持图表分析时间数据ggplot2CRAN
devtools::install_github("wilkox/treemapify") # 绘制树图ggplot2CRAN
devtools::install_github("Ryo-N7/tvthemes") # ggplot2热门电视节目的主题和调色板！CRAN
devtools::install_github("zanidean/xmrr") # 从时间系列数据生成 XMR 控制图表数据,CRAN
```

## 其他类型R包
```{r}
install.packages("Sysfonts") #
devtools::install_github("igraph/rigraph@master") #
install.packages("extrafont") #
install.packages("caTools")
install.packages("fpp3") #
install.packages("timetk") #
install.packages("modeltime") #
install.packages("plotly") #
install.packages("leaflet") #
install.packages("treemapify") #
install.packages("ggridges") #
install.packages("ggalluvial") #
install.packages("alluvial") #
install.packages("lubridate") #
install.packages("statnet") #
install.packages("cartogram") #
install.packages("fmsb") #
install.packages("treemap") #
install.packages("vioplot") #
install.packages("%>%") #
install.packages("ggmap") #
install.packages("linear models") #
install.packages("colorspace") #
install.packages("easyPubMed") #
install.packages("eulerr") #
install.packages("chorddiag") #
install.packages("maps") # 地图
install.packages("bioacoustics") # 分析声音
install.packages("radtools") # 操作医学图像数据
install.packages("ggasym") # 非对称矩阵绘图
install.packages("predict3d") # 二维三维绘图
install.packages("pins") # 提高速度远程操作
install.packages("sankywheel") #
install.packages("rayrender") #
install.packages("covid19us") #
install.packages("COVID19") #
install.packages("covid19.analytics") #
install.packages("regmedint") # sas部分功能
install.packages("covid19dbcand") #
install.packages("oysteR") #
install.packages("SITH") # 癌症生长随机模型
install.packages("glow") #
install.packages("DataEditR") # 交互编辑器
install.packages("raveio") # 脑电图
install.packages("gm") # 音乐
install.packages("nCov2019") #
install.packages("afdx") # 无黄金标准估计诊断性能
install.packages("spiralize") # 阿基米德
devtools::install_github("wjakethompson/taylor") #
install.packages("igraph") #
install.packages("nloptr") #
install.packages("sp") #
install.packages("rgeos") #
devtools::install_github("zoometh/iconr") # 研究史前图像学的形式化方法
```

## 画图包
```{r}
devtools::install_github("jrodu/qqboxplot") # q-qboxplots作为ggplot2的扩展
install.packages("pez") # 系统全面的系统发育R包
install.packages("r3dmol") # 在R中对分子结构进行3D可视化
install.packages("ggeconodist") # 可以画另类的箱线图
install.packages("lemon") # 可以很方便的操作ggplot2的图例和坐标轴参考https://cran.r-project.org/web/packages/lemon/vignettes/legends.htmlcomplex-layout-with-grid_arrange_shared_legend
devtools::install_github("ShixiangWang/ezcox") # 很方便的做Cox回归分析模型和森林图
install.packages("ggstream") # 河流图绘制
devtools::install_git("appliedepi/epirhandbook") # 该包集合了流行病学中诸多描述性分析的函数,其中epi.tests函数专门用于计算诊断试验的灵敏度,特异度及预测值等指标,详细介绍可以看链接https://rpubs.com/maomaoworm/690424
devtools::install_github("DillonHammill/DataEditR")
devtools::install_github("DillonHammill/rhandsontable") # 类似于excel的功能,对R语言已经读入的数据进行修改
install.packages("job") # 如果命令运行时间过长,是不能运行下一步命令的,这个包里可以将时间比较长的命令放到后台
install.packages("arrow") #
install.packages("hexView") #
install.packages("readODS") #
install.packages("rmatio") #
devtools::install_github("igraph/rigraph@master")
install.package("rticles")
devtools::install_github("joshkatz/needs", ref = "development")
```
